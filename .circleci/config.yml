defaults: &defaults
  working_directory: /tmp/build
  docker:
    - image: uubk/scinit-build:debian

defaults-ubuntu: &defaults-ubuntu
  working_directory: /tmp/build
  docker:
  - image: uubk/scinit-build:ubuntu

version: 2
jobs:
  build-check-ubuntu:
    <<: *defaults-ubuntu
    steps:
    - checkout
    - run:
        name: checkout submodules
        command: git submodule update --init
    - run:
        name: Fail on clang-tidy warnings
        command: |
          sed "s/WarningsAsErrors: ''/WarningsAsErrors: '*'/g" -i .clang-tidy && \
          cat .clang-tidy | grep WarningsAsErrors
    - run:
        name: build
        command: mkdir build && cd build && cmake .. && make -j4 && make test
  build-debian:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: checkout submodules
          command: git submodule update --init
      - run:
          name: Fail on clang-tidy warnings
          command: |
            sed "s/WarningsAsErrors: ''/WarningsAsErrors: '*'/g" -i .clang-tidy && \
            cat .clang-tidy | grep WarningsAsErrors
      - run:
          name: build
          command: mkdir build && cd build && cmake .. && make -j4 && make format
      - run:
          name: Check code format
          command: .circleci/check-format.sh
      - run:
          name: extract Debian 9 libs for ubuntu 14.04 testrunner
          command: |
            cp /usr/lib/x86_64-linux-gnu/libboost_program_options.so.1.62.0 /tmp/build/build && \
            cp /usr/lib/x86_64-linux-gnu/libboost_filesystem.so.1.62.0 /tmp/build/build && \
            cp /usr/lib/x86_64-linux-gnu/libboost_system.so.1.62.0 /tmp/build/build && \
            cp /usr/lib/x86_64-linux-gnu/libboost_signals.so.1.62.0 /tmp/build/build && \
            cp /lib/x86_64-linux-gnu/libcap.so.2.25 /tmp/build/build && \
            cp /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.22 /tmp/build/build && \
            cp /usr/lib/x86_64-linux-gnu/libyaml-cpp.so.0.5.2 /tmp/build/build && \
            cd /tmp/build/build && mv test/zombie . && mv src/scinit .
      - persist_to_workspace:
          root: build
          paths:
            - "*"
  unit-tests-debian:
      <<: *defaults
      steps:
      - checkout
      - attach_workspace:
          at: /tmp/build/build
      - run:
          name: Run unittests
          command: |
            mkdir -p unittests/tests && \
            cd build && \
            export GTEST_OUTPUT="xml:/tmp/build/unittests/test/" && \
            for i in $(echo test/*_tests) ; do $i --gtest_filter=-IntegrationTests.TestPrivDrop ; done && \
            cd /tmp/build/unittests/test && \
            for i in * ; do export DIR=$(echo $i|sed 's/_tests.xml//g') && mkdir ../$DIR ; cp $i ../$DIR ; done && \
            cd .. && \
            rm -Rf test
      - store_test_results:
          path: /tmp/build/unittests
  coverage-debian:
    <<: *defaults
    steps:
    - checkout
    - attach_workspace:
        at: /tmp/build/build
    - run:
        name: checkout submodules
        command: git submodule update --init
    - run:
        name: Check coverage
        command: |
          cd build && \
          make cover && \
          cp cover.info coverage.info
    - run:
        name: Upload coverage
        command: bash <(curl -s https://codecov.io/bash)
  smoke-test-debian:
    machine: true
    working_directory: /tmp/build
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/build/build
      - run:
          name: Symlink libs
          command: |
            cd build && ln -s libcap.so.2.25 libcap.so.2 && \
            ln -s libstdc++.so.6.0.22 libstdc++.so.6 && \
            ln -s libyaml-cpp.so.0.5.2 libyaml-cpp.so.0.5
      - run:
          name: Load smoke test config
          command: |
            cp .circleci/smoke-test-config.yml config.yml
      - run:
          name: Run smoke test
          command: sudo .circleci/smoke-test.sh
workflows:
  version: 2
  debian:
    jobs:
      - build-debian
      - unit-tests-debian:
          requires:
            - build-debian
      - smoke-test-debian:
          requires:
            - build-debian
      - coverage-debian:
          requires:
            - build-debian
  ubuntu:
    jobs:
      - build-check-ubuntu
